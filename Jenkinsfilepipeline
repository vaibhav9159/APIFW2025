pipeline 
{
    agent any
    
    tools{
    	maven 'maven'
        }

    stages 
    {
        stage('Build') 
        {
            steps
            {
                 git 'https://github.com/jglick/simple-maven-project-with-tests.git'
                 sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
            post 
            {
                success
                {
                    junit '**/target/surefire-reports/TEST-*.xml'
                    archiveArtifacts 'target/*.jar'
                }
            }
        }

        
        stage("Deploy to QA"){
            steps{
                echo("deploy to qa done")
            }
        }

    stage('Get OAuth Token') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'OAUTH_CLIENT_ID', variable: 'CLIENT_ID'),
                                     string(credentialsId: 'OAUTH_CLIENT_SECRET', variable: 'CLIENT_SECRET')]) {
                        // Now, CLIENT_ID and CLIENT_SECRET are available as environment variables
                        // within this block. Use them to construct your Rest Assured request.

                        // Example of how to use them (replace with your actual Rest Assured logic)
                        sh "echo 'Client ID: ${CLIENT_ID}'"
                        sh "echo 'Client Secret: ${CLIENT_SECRET}'"

                        // In your Java/Groovy code for Rest Assured:
                        // You would pass these variables to your Rest Assured setup,
                        // for example, as system properties or directly within the code
                        // if you are executing a Groovy script directly.

                        // Example for a Java/Groovy test execution:
                        // sh "mvn test -Dclient.id=${CLIENT_ID} -Dclient.secret=${CLIENT_SECRET}"
                        // Or, if running a direct Groovy script:
                        // def response = RestAssured.given()
                        //     .auth().preemptive().basic(env.CLIENT_ID, env.CLIENT_SECRET)
                        //     .post("your_token_endpoint")
                        //     .then()
                        //     .extract().response()
                    }
                }
            }
        }
        

        stage('Regression API Automation Test') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    git 'https://github.com/vaibhav9159/APIFW2025'
                    sh "mvn clean install -Dsurefire.suiteXmlFiles=src/test/resources/testrunners/Regression.xml -Denv=qa -Dclientid=${CLIENT_ID} -Dclientsecret=${CLIENT_SECRET}"
                    
                }
            }
        }
        
                
     
        stage('Publish Allure Reports') {
           steps {
                script {
                    allure([
                        includeProperties: false,
                        jdk: '',
                        properties: [],
                        reportBuildPolicy: 'ALWAYS',
                        results: [[path: '/allure-results']]
                    ])
                }
            }
        }
        
        
        
        
         stage("Deploy to STAGE"){
            steps{
                echo("deploy to STAGE done")
            }
        }
        
        stage('Sanity Automation Test') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                  	 git 'https://github.com/vaibhav9159/APIFW2025'
                    sh "mvn clean install -Dsurefire.suiteXmlFiles=src/test/resources/testrunners/Sanity.xml -Denv=qa"
                    
                }
            }
        }
        
           stage('Publish Allure Reports for sanity') {
           steps {
                script {
                    allure([
                        includeProperties: false,
                        jdk: '',
                        properties: [],
                        reportBuildPolicy: 'ALWAYS',
                        results: [[path: '/allure-results']]
                    ])
                }
            }
        }
        
        
        stage("Deploy to qa"){
            steps{
                echo("deploy to qa done !!!!")
            }
        }
    }
}
